The FirstComeFirstServed sort executes processes based on their arrival time.
If more than one process arrives at the same time, the process with the smaller
PID will be executed first. This sort is non preemptive, which means that an executed
process will not be interrupted once it starts executing. The other non preemptive
sort in this program is the Priority sort, therefore, its implementation is similar
to the FirstComeFirstServed sort. The only difference between the FirstComeFirstServed
sort and Priority sort is the way each process is sorted. While processes are still
executed by arrival time in the Priority sort, if mutliple processes arrive at the
same time, instead of executing the process with a lower PID, the scheduler will
execute the process with higher priority. The sorting algorithm that is the most
different is the ShortestJobFirst sort since we are using a preemptive implementation.
This means that if a process arrives with a shorter burst time, the current process
will be stopped and the new process will start to execute.
When all three sorting algorithms ran with the data from "pa2_batchfile.txt", I found
that the ShortestJobFirst algorithm was the most efficient, with FirstComeFirstServed
sort coming in second, and Priority sort finishing last.
Both FirstComeFirstServed and ShortestJobFirst sorts are scheduling algorithms used
in Batch systems. You would use these sorts if you wanted to maximize throughput, keep
the CPU busy at all times, and minimize the turnaround time for each process. Payroll
and inventory systems are examples of when FirstComeFirstServed and ShortestJobFirst
would be used as a scheduling algorithm. On the other hand, Priority sort is a
scheduling technique used in interactive systems. In these types of systems, response
time and proportionality are the main goals. The system should respond to reqests quickly
and satisfy the users' expectations. Some examples of interactive systems that would run
priority scheduling are PCs and servers.